openapi: 3.0.2
info:
  title: Reflectoring
  description: "Tutorials on Spring Boot and Java, thoughts about the Software Craft, and relevant book reviews. Because it's just as important to understand the Why as it is to understand the How. Have fun!"
  termsOfService: http://swagger.io/terms/
  contact:
    email: petros.stergioulas94@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
externalDocs:
  description: Find out more about Reflectoring
  url: https://reflectoring.io/about/
servers:
- url: https://reflectoring.swagger.io/v2
tags:
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /examples/{exampleId}:
    get:
      operationId: getExample
      tags:
        - example
      parameters:
        - name: exampleId
          in: path
          description: Path parameter that identifies the example.
          required: true
          schema:
            type:
              string
      responses:
        200:
          description: Everything went right, return the example.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/example_schema"
        422:
          description: The input parameters were invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        500:
          description: Server threw an error, returns json error object that contains a timestamp, GUID related to the error and a small error message.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnexpectedError"
  /examples:
    get:
      operationId: getExamples
      tags:
        - examples
      parameters:
        - name: listHasItems
          in: query
          required: false
          description: Optional parameter to test the non existing use case.
          schema:
            type: boolean
      responses:
        200:
          description: Everything went right.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/examples_list"
        422:
          description: The input parameters were invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        500:
          description: Server threw an error, returns a json error object that contains a timestamp, UUID related to the error and a small error message.
          content:
            application/json:
              schema:
                $ref: "#/definitions/schemas/UnexpectedError"
components:
  schemas:
    example_schema:
      type: object
      properties:
        result:
          type: string
    examples_list:
      type: array
      items:
        $ref: "#/components/schemas/example_schema"
    ValidationError:
      type: object
      required:
        - message
        - timestamp
      properties:
        message:
          description: Contains the main message of the exception, like whether a parameter was invalid.
          type: string
        timestamp:
          description: Use the ISO 8601 date time notation here. example '2016-01-01T10:00:00'
          type: string
    UnexpectedError:
      type: object
      required:
        - guid
        - message
        - timestamp
      properties:
        uuid:
          description: A universally unique identifier to this exception. Can be used to track the full exception in the logs.
          type: string
        message:
          description: Contaings the main message of the exception.
          type: string
        timestamp:
          description: Use the ISO 8601 date time notation here. example '2016-01-01T10:00:00'
          type: string